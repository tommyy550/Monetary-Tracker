<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAkGBw8QEBIQEBIPFRIVDw8PEBYVEBAPEBAQFRUXFxUWFhUY
        HSggGBolGxcVITEhJSkrLi4uFx8zODMtNygtLiv/2wBDAQoKCg4NDhsQEBstJR8mLS0tLS0tLS0tLS8t
        LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3/wAARCADhAOEDAREAAhEBAxEB/8QA
        GwABAAIDAQEAAAAAAAAAAAAAAAQFAQMGAgf/xAA8EAACAQICBggEAwcFAQAAAAAAAQIDEQQFBhIhMUFR
        EyIycYGRobFSYcHRQmJyFCMzU4KS8AdDouHxFv/EABsBAQACAwEBAAAAAAAAAAAAAAABAwQFBgIH/8QA
        NhEBAAIBAgQCBwgCAgMBAAAAAAECAwQRBRIhMUFRBhMyYXGBoRQVIkJSkdHwscEW4VNy8TP/2gAMAwEA
        AhEDEQA/ALs6t81AAAAAAAAAAAQBIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB7pUZS7Kb9jF1Oswaeu+W0R/fJk6bR59RbbFWZ/vn2S4ZVUe9xXmzQ5fSvR0nal
        bW+URH1lvMXotrLx+O1a/OZn6Q8zyuot2q/Q9YfSrRXn8XNX5b/4ec3ovrMfszW3996JODi7STXeb/Bq
        MWavNjtEw0ObT5cNuXJWYlgvVAAAAAAAAAAAAAAAAAAAAAAAAAAASsvwnSO77K9TQ8b4xGipy063n6e9
        vOC8InW35r9KR9Z8lrOrCmrLfyX1PnOXLk1F5vknefe+jYNPTDSKY42hHljZcEl6nmKQv5WY42XFJ92w
        Tjg2SGoVY8/dFum1ebSXi+Kdp+jD1WjxaqnJljeP72U2Mwzpys9z7L5n0zhPFKa7DzR0tHeP9/B814rw
        2+hzcs9az2n/AF8Wg2rWAAAAAAAAAAAIAkAAAAAAAAAAAASvsW9uyPN7xSs3t2jq9UpN7RWO89F/spU7
        LgrLvPkWr1NtXntlv4z+0eHyfW9Fpa6bDXDTw/u6vbvte/iVwzdknD4fdKVre54tbwhEy8Yig47eDexk
        1nciWulNxaaJmN07bpmNpKpTfdrIzuD6y2k1dbR2npPwn+Go4xo41WltXxjrHxj+VEfVofLAAAAAAAAA
        AAEASAAAAAAAAAAAA3YL+JD9RrOLzMaHLMfplseEViddiif1LXMN0V8/ofK8b6vCGWPaZTlGcFFuzK5i
        Yl5a8RGaSTd1fYTG0iOe3pY4PbBeK9Sq3Syu0KGorNr8z9z7Fpp3w0mfKP8AD49qY2zXiP1T/l5LlIAA
        AAAAAAAAAAAAAAAAAAAAA2YaerOMnwkn4cTD4hgnPpcmOveYll6DPGDU48lu0TH7eP0XeNheN1wd/A+R
        16TtL65WVcWrE1RhOKSsmVzvEvPVjF1I6qindisddyEQsell2Kd3wTb9yMOKc2WKR3mYhi6nNGLFa9u0
        Ru55vjzbZ9hxU5KRXyiIfIMlue8285mQ9vIAAAAAAAAAAAAAAAAAAAAAAAxYC5y3EqUdR71s70fOfSDh
        dtPlnPSPwW+kvofo/wAUrnxRgvP469PjBiMK1tjtXsc/W3hLpolHi2nfc0e0iTe67CUzDYa3Wlv4Irtb
        d4mUTNsUn+7j8tb7HX+jPCrc32rJHTry/wAuL9JeKRMfZcc/+0/6/lXHcR2cWAAAAAAAAAAAAAAAAAAA
        AAAAAADMZNbVsZXkxVyVmto3iXvHktjtFqztMeKyw2acJrxRxXEPRa0TNtLPTyn/AFLstB6UV25dVG0+
        cf7hMjiaUuMfQ53JwzWY55Zx2/bf/Do8fFNJeN65I/diWLpR4x8FtPeHhGtyztGOfn0V5uMaLFG9skfL
        qgYvM3LZDYufE6fhvovFJjJqZ390dvm5jiXpNbJE000be+e/yV6OvrWIiIiNnJTO87snoAAAAAAAAAAA
        AAAAAADFyJnaDYETuLDLMpqV7tbIre37LmYmq1tMHTvPk2Wg4Zk1czO+1Y8U+to5ZdSo2+UopJ+Rr6cY
        nfa9No+La5PRzau+PJ198dJUlalKEnGSakt6Nxiy1yV5qz0c7mwXw3ml42l4LFQAAAYsEbQyEhAACQAA
        AAAAAAAAAAAAAAAMMiY3AbeBLu8npqNCml8KfizlNZabZrb+b6Fw3HFNNSI8kmpHiYkwzlJn+B6SGvFd
        eK848V9TP4dqpxZOWe0tNxrQxnwzkrH4q/WPJzuHwlWp2ITl3LZ5nRXz48cb2tEOPxaXNlnbHSZ+ELGj
        o5iH2tSPe9Z+hhX4phr23ls8XAdVbrbavxn+Eynot8VXyj92Y9uL/pr9WbT0bn8+T9o/7bP/AJeH8yfl
        E8fe9/0x9Vv/ABzH/wCS30HovD+ZPyiPve/6Y+p/xzH+u37Q01dFpfhqLxi/oWV4tH5q/spv6OW/Jkj5
        wgV8gxMfwqS/LL6MyKcSw2nrOzAy8E1dI3iOb4Sr6lKUXaSafzTRnUvW/WstXkx3xzteJife8ljwEASA
        AAAAAAAAAAAAAAADARLvcqd6FO3wI5HVRtmt8X0XQTvpqfCEpmOy3iFPn5ERCZ7bPcUlsSsj147oiNo6
        NWLxdOjFzqSjGK4v2R6pSbztWHjJlpirzXnaFDiNNMJHs9JPujZepmU4dnt4bNbk4zpq9pmfhCHPTymt
        1GfjJIujhWSe8wxp4/i8Ky8x08hxoy/uRNuFX8LQiOP4/GkpNHTjDPtQqR8pIrtwzN4bSupxzBbvEwtc
        HpBhKtlCrG/KXUfqYuTS5qd6yzsWv0+TpW8f4T6tGFRWkoyXC6uVUvak/hnaV+TFjy12vETCkx2jcZba
        T1Xye2L+xs8HFLV6ZI397RavgFL9cE7T5T2c7isNOlLVnFp8OT7uZusWamWN6Tu5jPpsmC3LkjaWotUB
        IAAAAAAAAAAAAAAAe6FGU5KME23wPGTJWlea0rMWK+S8VpG8u2ybDTpUYwna6vu4I5fWZa5Ms2r2d5wz
        T30+njHk7wnGK2AAA5nTjLatenB0k5asm3Fb9vFGfw/NTHeebxafjGmy5sUcnXbwcnhdFsZUV1T1V+Zp
        G2vrsNfFocfCtVf8u3xTVoRirb6XdrMqnimL3sj7j1G3eGVoPivipf3Mj70xeUp+4s/nCPX0PxkVsjCX
        6ZK/qe68RwW7qr8G1NfCJ+aoxWArUv4lOce+OzzMuuWl/Zlr8mny4vbrMN+XZxiKD/d1JJcYvrQfg/oV
        5dLiyx+KPn4rcGuz4J3pZ9G0azf9ro67SUlJwmluva+w5/V6b1N9t3XcP1f2rFzbbSsMTh4VIuM4pr2K
        ceS2O29ZZOfT489eTJG8OTzfJZUetG8oc/xR7zf6TX1y/hv0s47iPCL6b8dOtfrCqNk0wSAAAAAAAAAA
        AAAZhFtpLe3ZEWmIjeU1rNpiseLtMmy1UYbe211n9O45fWauc9+nZ3nDOH10uPefanvP+lkYbZASEASA
        AAAAAeZwUtjSa+av7iJ27PNqxbpMbqLMdEcJWesk6b4uDsn3p3RnYeIZsfjv8Ws1HCNPlneI5Z9yzyvL
        qeGpqnTTttbbd22+LMbNmtmtzWZum02PT4+SiYVMhiUU1Z7V6W+Y32RMRMbS5DSDKuhfSQ/ht9ZfA/sb
        zRa/mmKZO/m4/i3CfU75cXs+MeX/AEp00bndoNmQgCQAAAAAAACRTwFaSUo05tPamlvKLanDWdptDJpo
        tReOatJmG2OUYl/7U/Gy92eJ12nj88fVdHC9ZPbHP0/la5Dk9SNTXqwtqrqptO757DX6/W0vj5MU7792
        34RwvLjzesz1227du7pTSOqa8RWUISnLdGMpvnaKbfsNt5RL4zjf9QMwnVc4VFCF+rBRTSjwvz2GVGKu
        yrml9R0Qzp43CQrtWleUKiW7Xja7XemmY967TssrO8Lk8vQAAAAAAAAAAAPFalGcXCSvFqzXNMROzzas
        WjaXy7O8JUwleVO71e1B84cPsdJo83rMe8d3DcQ0nqMs18PB4w2YX2SMv1kx3a+cfksMKnVlqQV5fIrv
        q8dI3tL3h0uXNblxxvKwx2UVKMOkbi0u1+Ux8HEseW/JETDP1fBc+mxesmYmPFXJmxiWo2ZJQWABIASv
        s8CJ7ERvOz6FhaahCMVwil6HHZbc95t5vpWCnq8VaR4Q2nhaAAl5qQUk4tXTTi1zTVmEPmGN/wBLqvSv
        oa1PonLZrRevBctm8vjN5q5o+gaP5RDBYeGHhdqN2298pt3lL/ORVa3NO6yI2WJ5SAAAAAAAAAAAABz+
        lGTftahqtRlF2u1fqvejK0er9Rad+seTXcR0H2qtdp2mPFT0tCF+Ks/6Yr6mXbi8+FGvpwCPzX+jocoy
        qnhoasNrb2yfaZrdRqLZrby3Gk0lNNTavfxmfFTabZlKnTVGMHaots7dW3FL5mZwzBz3558Gt43q5x4/
        VVj2vFxNHEShufgdDMOSmIlPo5in2id1c0SP2yn8Q3eeWUgseQD1S7Uf1L3PN/Zl6x+3Hxh9FW44yX02
        OwEgAAAIAkAAAAAAAAAAAAA11JcDzMmzTJ2Te3Ymzz3T2QclzRYmn0ii49Zxs2m9hfqNPbDaKz5bsXR6
        qNTTniNuu3VInWmqkYKDcWryndWi+VuJjr5tPNtEdPNXaW0YywlRy/ClOPylf/v1M3QWmuorEeLB4tSL
        6W0z4dnzQ6lxEgQAdKWMcAJiT4O+y3EKpShNfCr96OQ1GKceW1ZfRtHnjNhrePGEkpZQAAEASgCQAAAA
        AAAAAAAa5z4HmZGo8pYnufcyY7ons+f6M58sNKUKl3TlJvZtcXzsdDrdFOasWp7UQ5DhnEY00zS/s/4d
        a9IcHbW6aHu/Leaf7Fn325ZdD95aWI354clpNpH+0Lo6SapXvK++o+Hh8jcaHQep/Ff2vJz/ABPin2iP
        V442r9Zc6bNpQAB0pYxwABcaP5qqUtSfYk9j+F/Y1fENHOWOeneG84PxKNPPq8nsz4+Trk77f/PM57s7
        OGQlBzHN8Ph1erNJ8IrrTfckW4sN8s7UjdjZ9XhwRvkts5elpDVxmLo0qScKSqa8lfrSjHbt5L5GxnR1
        wYrXvPXwaWvEb6vUVx4+ld9/2dqjUujZAAAAAAAAAAMNkDXOpyImU7NZ5ADTjayhSqTe6NOcn4JnqlZt
        aIhXmvFMdrz4RL5GdlD53JclG8gGAAADpSxjgAAEJ2CzetRWrGSceCltSMHUaDHlnftPubPScV1Gmry1
        6x71TmmkGNk3GVRxXKC1V57yrFoMVO8b/Ffl4tqMse1t8FHKTbbbu3vb2t95nRERG0Q182mZ3nu7zQLK
        XCLxE1ZyWrTT2dXn4mk4lqYtPq6+Hd1HBdHNInNaOs9nXmpb4JSAAAAAAAAeJTSI3GqUmzzMpYPIEgBQ
        6aYvo8K4J9ao1D+ne/t4mdw/F6zPHlHVqeM5/V6aa+Np2/l86OncYAAAAAB0pYxwAAABDXVwbq9VJuXC
        28qyTERvM7LcVb2ty0jeVrkehrUlUxFrKzUFtv8AqZptRxLpy4+/m6jRcGneL5u3l/LtYxSVkkktitsS
        NRMzM7y6OIiI2hkJAAAAAAAeJVEedzZrc2yN0vJAAAAAD5zpdmXT12ou8Kd4R5N/ifmdHw3T+rx8095/
        sON4vq/XZuWs9K9FEbJqAAAAAAOlLGOAAAADfgsVKlNTjvXDg1yKdRhrmpNJZGl1V9NljJX/AO+52+Ax
        sK0FKPiuKfzOWz4bYb8tnfaTVY9Tji9Pn7kkpZQAAAYbIHl1EOY2eXV5HnmS8NkdRgAAAAAAFDpdm3QU
        tSL/AHlRNLnGPGRm6HTeuyde0d2q4rrfs+Llr7U9I/l87Oo2jbo4uZYAAAAAAB0pYxwAAAAAJOWY2VGr
        GSfVclGa4OL+xq+J4ZvTmjwbPhWqnBnjr0nu7l1Tm+Z3uzHSscyR1GN5NnnWZG8jAAAAAAAAAABrxFaN
        OMpydoxTb7kTWJtO0PN71pWbW7Q+W5vj5YitKo+LtFfDFbkdXpMEYccV8fFwet1M6jNN5+XwQjJYgAAA
        AAADpSxjgAAAAAYa/wA9iu9YtG0pi01neHbZbW16UJflSfethyGfF6rJNH0bQ5/X4KX84SSllAGmti6c
        JRhOUYylfVTdr23nquO1omYjsrvmpS0VtMRM9m48rAAAAAeZzSV20lxbdkIjfsiZiI3mdoR8Dj6dbW6N
        uUYy1XK3Vk+NvNFmTFbHtzdFOHUUzb8naOnzSiteAcfpzmlrYaD5SqfRG24ZpuafW28HO8b1e0Rhr49Z
        cYb+HMAAAAAAAAHSljHAAAAAAEDo9F614Shyd13M57i+LbJF/N1/o7mmcVsflPT4Ls07ogkcDp3X1sRG
        HwU14Nu50HCccRim3nP0clx3JvnivlCtwGf4qjshUk4/DLrx9dq8DKy6HDk7xtPnDC0/EtRh6Vt08p6w
        uqGm9RdulB83GTj6O5g34PH5bfu2WLj949ukfLp9Elab0+NGf9yKvue/6oZEekFP0T9CWnEOFGfjNIfc
        9/1R9SfSDH+ifog4nTWs+xTpw5N3m0X04RSPatPyYuTj+WY/BWIUmMzGviHapUnK72K/Vu+UdxnY9Lhw
        9a1j4tXl1efUTta0z7vB9JyfBKhQhT4qKcvnJ7WzmtTmnNlm8u10WCuDDWlf7KaUMpFzPGxoUp1ZfhWx
        c3wR7xY5yXisKNTnjDitefB8rxFeVScpzd5Sk5SfzZ1+LHGOsVjwcBly2y3m9vFqPasAAAAAAAA6UsY4
        AAAAAADfg8XOlLWg1e1ndXTMfU6amevLZlaTWZNLfnx7fNrxmlOMg7Lorc+jf3Nd904YnrMttHHtTMdO
        X9kGppTjX/uW7oxX0Lq8M08eG6u3GdXP5tvkqsTiJ1JOc5OUnvb3vkZmPHXHHLWNoa/LltltzXneWo9q
        wAAAAeqc3FqS3pprvRExExtL1W01mJhfUdMMXHf0cv1RafozW34ThntMtvTjmprG07T8YSVpvX/lUv8A
        n9yv7np+qV3/ACDL+iPqqs3z2tikoz1VFO6jFWV+bu9pl6bQ48E80T182BrOJZdTG1ukeSrMxrwAAAAA
        AAAB0pYxwAAAAAAADXWpKSsyJjcidlRisI4dxVPSdpXRO6KenoAAAAAAAAAAAAAAAAAAAAB0pYxwAAAA
        AAAABiUU9jImNyJ2VONwertjuMa1pxz17L6TzIJdExPZIAAAAAGSOaDYsRz1807SwTvCNgkAAAAAAAAA
        3hOzpSxjAAAAAAAAAABrxHZZjav/APNZh9pQT3jD7C63d5LXkAAABFuxDKMHIyKhhz3XR2YNlh7MW4ZM
        KwAAAAAAASQ9FT2//9k=
</value>
  </data>
</root>